name: CI

on:
  push:
    branches: [master, dev]
  pull_request:
    branches: [master, dev]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: "20"
  PYTHON_VERSION: "3.11"
  PNPM_VERSION: "latest"

jobs:
  # Repository validation
  validate:
    name: Validate Repository Structure
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validate repository structure
        run: |
          echo "Validating repository structure..."
          test -f CLAUDE.md || { echo "CLAUDE.md missing"; exit 1; }
          test -f README.md || { echo "README.md missing"; exit 1; }
          test -f .gitignore || { echo ".gitignore missing"; exit 1; }
          test -f docker-compose.yml || { echo "docker-compose.yml missing"; exit 1; }
          test -f Makefile || { echo "Makefile missing"; exit 1; }
          test -d app || { echo "app directory missing"; exit 1; }
          test -d collectors || { echo "collectors directory missing"; exit 1; }
          test -d tests || { echo "tests directory missing"; exit 1; }
          echo "Repository structure validation passed ✅"

  # Security checks
  security:
    name: Security Checks
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check for secrets
        run: |
          echo "Checking for accidentally committed secrets..."
          # Check for API keys, tokens, passwords
          if grep -rE "(OPENAI_API_KEY|SUPABASE_SERVICE_ROLE_KEY|DATABASE_PASSWORD|QIITA_TOKEN)\s*=\s*['\"][^'\"]+" app/ collectors/ src/ 2>/dev/null | grep -v ".example" | grep -v "#"; then
            echo "❌ Found potential secrets"
            exit 1
          fi
          if find . -type f -name ".env" -not -path "./.git/*" -not -path "./node_modules/*" 2>/dev/null | grep -q .; then
            echo "❌ Found .env files that should not be committed"
            exit 1
          fi
          echo "✅ No secrets found"

  # Python Backend Tests
  python-tests:
    name: Python Backend CI
    runs-on: ubuntu-latest
    timeout-minutes: 20
    services:
      postgres:
        image: pgvector/pgvector:pg16
        env:
          POSTGRES_USER: mindbase
          POSTGRES_PASSWORD: mindbase_dev
          POSTGRES_DB: mindbase_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio pytest-cov

      - name: Lint with Ruff
        run: |
          pip install ruff
          ruff check app/ collectors/

      - name: Format check with Black
        run: |
          pip install black
          black --check app/ collectors/

      - name: Type check with mypy
        run: |
          pip install mypy
          mypy app/ collectors/ --ignore-missing-imports
        continue-on-error: true  # Don't fail CI on type errors initially

      - name: Run unit tests
        env:
          DATABASE_URL: postgresql+asyncpg://mindbase:mindbase_dev@localhost:5432/mindbase_test
          OLLAMA_URL: http://localhost:11434
        run: |
          pytest tests/unit -v --cov=app --cov=collectors --cov-report=xml --cov-report=term-missing

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: always()
        with:
          files: ./coverage.xml
          fail_ci_if_error: false

  # TypeScript Tests
  typescript-tests:
    name: TypeScript CI
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Enable corepack
        run: corepack enable

      - name: Install pnpm
        run: corepack prepare pnpm@latest --activate

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Type check
        run: pnpm typecheck

      - name: Lint
        run: pnpm lint
        continue-on-error: true  # Don't fail CI on lint errors initially

  # Docker Build Test
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          docker compose build api
          echo "✅ Docker build successful"

  # Integration Tests (requires Docker services)
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Start Docker services
        run: |
          docker compose up -d postgres ollama
          sleep 10  # Wait for services to be ready

      - name: Wait for Ollama model
        run: |
          docker compose exec -T ollama ollama pull qwen3-embedding:8b || true
          echo "✅ Ollama ready"

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest pytest-asyncio pytest-cov

      - name: Run integration tests
        env:
          DATABASE_URL: postgresql+asyncpg://mindbase:mindbase_dev@localhost:15433/mindbase
          OLLAMA_URL: http://localhost:11434
        run: |
          pytest tests/integration -v --maxfail=3

      - name: Stop Docker services
        if: always()
        run: docker compose down -v

  # All checks passed
  all-checks:
    name: All Checks Passed
    needs: [validate, security, python-tests, typescript-tests, docker-build]
    runs-on: ubuntu-latest
    steps:
      - name: Success
        run: echo "✅ All CI checks passed successfully"
